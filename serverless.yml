service: produtos-mercado
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8

  environment:
    SHOPPING_LIST_TABLE: ShoppingList-${self:provider.stage}

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  create_new_list:
    handler: src/handler.create_list
    events:
      - httpApi: 'POST /shopping-list'

resources:
  Resources:

    ShoppingListTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: owner-email
            AttributeType: S
          - AttributeName: owner-name
            AttributeType: S
        KeySchema:
          - AttributeName: owner-email
            KeyType: HASH
          - AttributeName: owner-name
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SHOPPING_LIST_TABLE}